unit UFuncionarios;

interface

type
  TFuncionario = class
private
  FNome       : String;
  FSobreNome  : String;
  FSalarioMensal    : Double;

//Functions
    function GetNome: String;
    function GetSalarioMensal: Double;
    function GetSobreNome: String;

//Procedures
    procedure SetNome(const Value: String);
    procedure SetSalarioMensal(const Value: Double);
    procedure SetSobreNome(const Value: String);

public
  Constructor Create(Nome, SobreNome:  String; SalarioMensal:   Double);
  property Nome: String read GetNome Write SetNome;
  property SobreNome:  String read GetSobreNome write SetSobreNome;
  property SalarioMensal: Double  read GetSalarioMensal write SetSalarioMensal;


end;

implementation

{ TFuncionario }

constructor TFuncionario.Create(Nome, SobreNome: String; SalarioMensal: Double);
begin
  FNome          := Nome;
  FSobreNome     := SobreNome;
  FSalarioMensal := SalarioMensal;
end;

function TFuncionario.GetNome: String;
begin
  Result := FNome;
end;

function TFuncionario.GetSalarioMensal: Double;
begin
  Result := FSalarioMensal;
end;

function TFuncionario.GetSobreNome: String;
begin
  Result := FSobreNome;
end;

procedure TFuncionario.SetNome(const Value: String);
var
 xFuncionario1, xFuncionario2: TFuncionario;
begin
  FNome := Value;
end;

procedure TFuncionario.SetSalarioMensal(const Value: Double);
begin
  FSalarioMensal := Value;
end;

procedure TFuncionario.SetSobreNome(const Value: String);
begin
  FSobreNome := Value;
end;

end.



